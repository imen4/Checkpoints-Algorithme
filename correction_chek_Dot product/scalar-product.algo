PROCEDURE dot_product(v1,v2 : ARRAY_OF INTEGER, var dot :INTEGER)
VAR
    i : INTEGER;
BEGIN
    dot :=0;
    i :=0;
    IF (v1.length <> v2.length) THEN
        write("vectors with different sizes we can not calculat dot product.");
        dot := NaN ; //NaN : not definte number
    END_IF
    WHILE (i < v1.length) DO
        dot := dot + v1[i]*v2[i];
    END_WHILE
END

ALGORITHM orth_vectors
VAR
    v1,v2 : ARRAY_OF INTEGER;
    dot : INTEGER;
    n1,n2 : INTEGER;
BEGIN
    // read size of elements v1
    n1 := read_size(v1);
    //read elements of v1
    read_array(n1,v1);
    // read size of elements v2
    n2 := read_size(v2);
    //read elements of v2
    read_array(n2,v2);
    
    dot_product(v1,v2,dot);
    IF (dot := 0) THEN
        write("v1 and v2 are orthogonal")
    ELSE
        write("v1 and v2 are not orthogonal")
    END_IF
END
///////////////////////////////

FUNCTION dot_product(v1,v2 : ARRAY_OF INTEGER) : INTEGER
VAR
    i, dot : INTEGER
BEGIN
    dot :=0;
    i := 0;
    IF (v1.length <> v2.length) THEN
        write("vectors with different sizes we can not calculat dot product.");
        RETURN NaN ; //NaN : not definte number
    END_IF
    WHILE (i < v1.length) DO
        dot := dot + v1[i]*v2[i];
    END_WHILE
    RETURN dot;
END

ALGORITHM orth_vectors
VAR
    v1,v2 : ARRAY_OF INTEGER;
    dot : INTEGER;
    n1,n2 : INTEGER;
BEGIN
    // read size of elements v1
    n1 := read_size(v1);
    //read elements of v1
    read_array(n1,v1);
    // read size of elements v2
    n2 := read_size(v2);
    //read elements of v2
    read_array(n2,v2);

    dot := dot_product(v1,v2);
    IF (dot := 0) THEN
        write("v1 and v2 are orthogonal")
    ELSE
        write("v1 and v2 are not orthogonal")
    END_IF
END
